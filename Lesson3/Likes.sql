DROP TABLE IF EXISTS users;
CREATE TABLE users (
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	email VARCHAR(100) UNIQUE NOT NULL,
	phone VARCHAR(11) UNIQUE NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
	);

DROP TABLE IF EXISTS profiles;
CREATE TABLE profiles (
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	first_name VARCHAR(100),
	last_name VARCHAR(100),
	birth_date DATE,
	user_id INT UNIQUE NOT NULL,
	country VARCHAR(100),
	city VARCHAR(100),
	profile_status ENUM('ONLINE', 'OFFLINE', 'INACTIVE'),
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
ALTER TABLE profiles ADD CONSTRAINT fk_profiles_user_id FOREIGN KEY (user_id) REFERENCES users(id) 

DROP TABLE IF EXISTS messages;
CREATE TABLE messages (
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	from_user_id INT NOT NULL,
	to_user_id INT NOT NULL,
	message_header VARCHAR(255),
	message_body TEXT NOT NULL,
	sent_flag TINYINT NOT NULL,
	recieved_flag TINYINT NOT NULL,
	edited_flag TINYINT NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
ALTER TABLE messages ADD CONSTRAINT fk_messages_from_user_id FOREIGN KEY (from_user_id) REFERENCES users(id);
ALTER TABLE messages ADD CONSTRAINT fk_messages_to_user_id FOREIGN KEY (to_user_id) REFERENCES users(id);

DROP TABLE IF EXISTS friendship;
CREATE TABLE friendship (
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	user_id INT NOT NULL,
	friend_id INT NOT NULL,
	friendship_status ENUM('FRIENDSHIP', 'FOLLOWING', 'BLOCKED'),
	requested_at DATETIME NOT NULL,
	accepted_at DATETIME,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
ALTER TABLE friendship ADD CONSTRAINT fk_friendship_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE friendship ADD CONSTRAINT fk_friendship_friend_id FOREIGN KEY (friend_id) REFERENCES users(id);

DROP TABLE IF EXISTS communities;
CREATE TABLE communities (
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	name VARCHAR(255) UNIQUE NOT NULL,
	user_id INT NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS communities_users;
CREATE TABLE communities_users (
	community_id INT NOT NULL,
	user_id INT NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY (community_id, user_id)
);
ALTER TABLE communities_users ADD CONSTRAINT fk_cu_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE communities_users ADD CONSTRAINT fk_cu_community_id FOREIGN KEY (community_id) REFERENCES communities(id);




-- HomeWork
DROP TABLE IF EXISTS posts;
CREATE TABLE posts(
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	post_header VARCHAR(10) NOT NULL,
	post VARCHAR(255) NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS user_posts;
CREATE TABLE user_posts(
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	post_id INT NOT NULL,
	user_id INT NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
ALTER TABLE user_posts ADD CONSTRAINT fk_up_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE user_posts ADD CONSTRAINT fk_up_post_id FOREIGN KEY (post_id) REFERENCES posts(id);


DROP TABLE IF EXISTS media_data;
CREATE TABLE media_data(
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	media_header VARCHAR(10) NOT NULL,
	media BINARY,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS user_mediafiles;
CREATE TABLE user_mediafiles(
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	media_id INT NOT NULL,
	user_id INT NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
ALTER TABLE user_mediafiles ADD CONSTRAINT fk_um_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE user_mediafiles ADD CONSTRAINT fk_um_media_id FOREIGN KEY (media_id) REFERENCES media_data(id);


DROP TABLE IF EXISTS likes_profiles;
CREATE TABLE likes_profiles(
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	user_id INT NOT NULL,
	profile_id INT NOT NULL,
	like_state ENUM('LIKE', 'DISLIKE', 'NEUATRAL'),
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE likes_profiles ADD CONSTRAINT fk_lprf_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE likes_profiles ADD CONSTRAINT fk_lprf_profile_id FOREIGN KEY (profile_id) REFERENCES profiles(id);


DROP TABLE IF EXISTS likes_posts;
CREATE TABLE likes_posts(
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	user_id INT NOT NULL,
	post_id INT NOT NULL,
	like_state ENUM('LIKE', 'DISLIKE', 'NEUATRAL'),
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE likes_posts ADD CONSTRAINT fk_lpst_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE likes_posts ADD CONSTRAINT fk_lpst_post_id FOREIGN KEY (post_id) REFERENCES user_posts(id);


DROP TABLE IF EXISTS likes_medias;
CREATE TABLE likes_medias(
	id INT(11) AUTO_INCREMENT NOT NULL PRIMARY KEY,
	user_id INT NOT NULL,
	media_id INT NOT NULL,
	like_state ENUM('LIKE', 'DISLIKE', 'NEUATRAL'),
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE likes_medias ADD CONSTRAINT fk_lm_user_id FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE likes_medias ADD CONSTRAINT fk_lm_media_id FOREIGN KEY (media_id) REFERENCES user_mediafiles(id);